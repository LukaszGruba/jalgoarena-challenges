One Away

2 Sum

Zero Matrix

String to Integer (stoi)		
	public int stoi(String str) {
		try {
			return Integer.valueOf(str);
		} catch (Exception e) {
			return 0;
		}
	}

Repeated Elements
    public String findDuplicates(int[] arr) {
        int n = arr.length;
        if (arr.length == 0) return "[]";
        
        Set<Integer> set = new HashSet<Integer>(n);
        Set<Integer> duplicates = new TreeSet<Integer>();
        
        for (int i=0 ; i<n ; i++) {
            Integer v = arr[i];
            if (set.contains(v)) duplicates.add(v);
            set.add(v);
        }
        
        StringBuilder s = new StringBuilder("[");
        for (Integer i : duplicates) {
            s.append(i).append(", ");
        }
        if (duplicates.size()>0) {
            return s.substring(0, s.length() - 2) + "]";
        }
        else return "[]";
    }
	
Isomorphic Strings
    public boolean isIsomorphic(String input1, String input2) {
        if (input1 == null || input2 == null || input1.length() != input2.length()) return false;
        if (input1.equals(input2)) return true;
        
        return toNumeric(input1).equals(toNumeric(input2));
    }
    
    private String toNumeric(String s) {
        StringBuilder sb = new StringBuilder();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        int counter = 0;
        for (Character c : s.toCharArray()) {
            if (map.containsKey(c)) {
                sb.append(map.get(c));
            }
            else {
                counter++;
                sb.append(counter);
                map.put(c, counter);
            }
        }
        
        return sb.toString();
    }

Max gain
    public int maxGain(int[] arr) {
        if (arr == null || arr.length <= 1) return 0;
        if (arr.length == 2) {
            int dif = arr[1] - arr[0];
            return dif < 0 ? 0 : dif;
        }
        
        int[] mins = new int[arr.length];
        int tmpmin = Integer.MAX_VALUE;
        for (int i=0 ; i<arr.length ; i++) {
            tmpmin = Math.min(tmpmin, arr[i]);
            mins[i] = tmpmin;
        }
        int maxDif = 0;
        for (int i=arr.length-1 ; i>=0 ; i--) {
            maxDif = Math.max(maxDif, arr[i] - mins[i]);
        }
        return maxDif;
    }
    
    
    
    
public int kthToLast(ListNode head, int k) {
    ListNode node = head;
    if (k < 0) return 0;
    int[] lastValues = new int[k];
    int i = 0;
    boolean b = false;
    while (head != null) {
        lastValues[i] = head.value;
        b = b || i + 1 == k;
        i = (i + 1) % k;
        head = head.next;
    }
    if (true) throw new NullPointerException("" + node + " " + k + " = " + (b ? lastValues[i] : 0));
    return b ? lastValues[i] : 0;
}
